{"version":3,"file":"component---src-pages-sketches-mime-mime-tsx-2dd1bede237f94dc1c1d.js","mappings":"2NAMA,MAAMA,EAAS,IACTC,EAAQ,IAmCDC,EAAO,IAAMC,EAAAA,cAACC,EAAAA,EAAG,CAACC,MAAO,SAEtC,UAnCa,IAAMF,EAAAA,cAACG,EAAAA,EAAY,CAC9BL,MAAOA,EACPD,OAAQA,EACRO,mBAAoB,CAAEC,gBAAiB,CAAC,IAAK,IAAK,MAClDC,cAAe,CAACC,EAAK,KAA0D,IAA1D,QAAEC,EAAO,QAAEC,EAAO,OAAEC,EAAM,OAAEC,EAAM,gBAAEC,GAAiB,GAYxEC,EAAAA,EAAAA,GAAiCN,GAC/B,KACE,MAAMO,EAAW,IAAIC,EAAAA,IAKrB,OAJAD,EAASE,UAAU,QAAS,IAC5BF,EAASG,WAAW,EAAG,EAAG,GAC1BH,EAASI,UAEFX,EAAIY,SAASC,gBAAgBN,EAAS,GAlBjD,YACE,IAAK,IAAIO,EAAIxB,IAAYwB,EAAIxB,IAAgBwB,GAAKT,EAAiB,CACjE,MAAMU,EAAKD,EAAIxB,GAAWY,EAAUD,GAAWA,EACzCe,EAAKF,EAAIxB,GAAWc,EAASD,GAAUA,EAE7C,IAAK,IAAIc,EAAI1B,IAAYwB,EAAIG,KAAKC,GAAK,EAAGF,EAAI1B,IAAYwB,EAAIG,KAAKC,GAAK,EAAGF,SACnE,CAAEG,EAAGH,EAAGI,EAAGH,KAAKI,KAAKL,EAAI1B,KAAawB,GAAKC,EAAIF,EAEzD,CACF,CAUKS,GAAoB,EACxBC,cAAe,CAClB,CAAEC,aAAc,EAAGC,KAAM,UAAWC,MAAO,iBAC3C,CAAEF,aAAc,GAAIC,KAAM,UAAWC,MAAO,iBAC5C,CAAEF,aAAc,GAAIC,KAAM,SAAUC,MAAO,iBAC3C,CAAEF,aAAc,GAAIC,KAAM,SAAUC,MAAO,iBAC3C,CAAEF,aAAc,EAAGC,KAAM,kBAAmBC,MAAO,sB,qEC7B9C,MAAMrB,EAAmC,CAC9CN,EACA4B,EACAC,EACAC,KACI,IAAD,EACGF,aAAmBG,EAAAA,MACvBH,EAAUA,KAGZ,MAAMI,EAAU,GAEhB,IAAIC,EAAUJ,EAAmBK,OAEjC,MAAQD,EAAQE,MAAM,CACpB,MAAM,EAACf,EAAC,EAAEC,EAAC,MAAEe,GAASH,EAAQI,MAC9B,IAAIC,EAAIF,GAAgB,EACxB,MAAMG,EAAS,IAAIC,EAAAA,IAAOZ,GAC1BW,EAAOnB,EAAIA,EAAKmB,EAAOhD,MAAQ+C,EAAK,EACpCC,EAAOlB,EAAIA,EAAKkB,EAAOjD,OAASgD,EAAK,EACrCC,EAAOH,MAAQ,CAAEhB,EAAGkB,EAAGjB,EAAGiB,GAC1BN,EAAQS,KAAKF,GACbN,EAAUJ,EAAmBK,MAC/B,CAEKJ,IACHA,EAAoB,IAAItB,EAAAA,IAAuBwB,EAAQU,UAGzD,EAAAZ,GAAkBa,SAAQ,QAAIX,GAG9BhC,EAAI4C,MAAMD,SAASb,EAAkB,C","sources":["webpack://playground-gatsby/./src/pages/sketches/mime/mime.tsx","webpack://playground-gatsby/./src/utils/createSpritesInParticleContainer.ts"],"sourcesContent":["import { StaticSketch } from \"../../../components\"\r\nimport React from \"react\"\r\nimport { createSpritesInParticleContainer } from \"../../../utils/createSpritesInParticleContainer\"\r\nimport * as PIXI from \"pixi.js\";\r\nimport Seo from \"../../../components/seo\"\r\n\r\nconst height = 512;\r\nconst width = 512;\r\n\r\nconst Mime = () => <StaticSketch\r\n  width={width}\r\n  height={height}\r\n  applicationOptions={{ backgroundColor: [.75, .75, .75] }}\r\n  renderContent={(app, { minFreq, maxFreq, minAmp, maxAmp, verticalSpacing }) => {\r\n    function* spriteCoordinates() {\r\n      for (let i = height / 4; i < height * 3 / 4; i += verticalSpacing) {\r\n        const f = (i / height) * (maxFreq - minFreq) + minFreq;\r\n        const a = (i / height) * (maxAmp - minAmp) + minAmp;\r\n\r\n        for (let j = width / 2 - f * Math.PI * 6; j < width / 2 + f * Math.PI * 6; j++) {\r\n          yield { x: j, y: Math.cos((j - width / 2) / f) * a + i};\r\n        }\r\n      }\r\n    }\r\n\r\n    createSpritesInParticleContainer(app,\r\n      () => {\r\n        const graphics = new PIXI.Graphics();\r\n        graphics.beginFill('black', .2);\r\n        graphics.drawCircle(0, 0, 2);\r\n        graphics.endFill();\r\n\r\n        return app.renderer.generateTexture(graphics);\r\n      }, spriteCoordinates());\r\n  }} sketchOptions={[\r\n  { initialValue: 2, name: 'minFreq', label: 'Min Frequency' },\r\n  { initialValue: 16, name: 'maxFreq', label: 'Max Frequency' },\r\n  { initialValue: 10, name: 'minAmp', label: 'Min Amplitude' },\r\n  { initialValue: 25, name: 'maxAmp', label: 'Max Amplitude' },\r\n  { initialValue: 2, name: 'verticalSpacing', label: 'Vertical Spacing' }\r\n]} />\r\n\r\nexport const Head = () => <Seo title={\"Mime\"} />\r\n\r\nexport default Mime;","import { Application, RenderTexture, Sprite } from \"pixi.js\"\r\nimport * as PIXI from \"pixi.js\";\r\n\r\n/**\r\n * Using a given texture, coordinate generator, and app, creates a particle container with sprites at the given coordinates.\r\n * @param app - Application to add the particle container to\r\n * @param texture - A texture or a function that returns a texture\r\n * @param coordinateFunction - Generator function that returns an object with x and y coordinates\r\n * @param particleContainer - optional ParticleContainer to add sprites to, if specified, ensure that the max size is greater than the number of sprites\r\n */\r\nexport const createSpritesInParticleContainer = (\r\n  app: Application,\r\n  texture: RenderTexture | (() => RenderTexture),\r\n  coordinateFunction: Generator<{ x: number, y: number, scale?: number }>,\r\n  particleContainer?: PIXI.ParticleContainer\r\n) => {\r\n  if (!(texture instanceof RenderTexture)) {\r\n    texture = texture();\r\n  }\r\n\r\n  const sprites = [];\r\n\r\n  let current = coordinateFunction.next();\r\n\r\n  while (!current.done) {\r\n    const {x, y, scale} = current.value;\r\n    let s = scale ? scale : 1;\r\n    const sprite = new Sprite(texture);\r\n    sprite.x = x - (sprite.width * s) / 2;\r\n    sprite.y = y - (sprite.height * s) / 2;\r\n    sprite.scale = { x: s, y: s }\r\n    sprites.push(sprite);\r\n    current = coordinateFunction.next();\r\n  }\r\n\r\n  if (!particleContainer) {\r\n    particleContainer = new PIXI.ParticleContainer(sprites.length);\r\n  }\r\n\r\n  particleContainer.addChild(...sprites);\r\n\r\n  // @ts-ignore\r\n  app.stage.addChild(particleContainer);\r\n}"],"names":["height","width","Head","React","Seo","title","StaticSketch","applicationOptions","backgroundColor","renderContent","app","minFreq","maxFreq","minAmp","maxAmp","verticalSpacing","createSpritesInParticleContainer","graphics","PIXI","beginFill","drawCircle","endFill","renderer","generateTexture","i","f","a","j","Math","PI","x","y","cos","spriteCoordinates","sketchOptions","initialValue","name","label","texture","coordinateFunction","particleContainer","RenderTexture","sprites","current","next","done","scale","value","s","sprite","Sprite","push","length","addChild","stage"],"sourceRoot":""}