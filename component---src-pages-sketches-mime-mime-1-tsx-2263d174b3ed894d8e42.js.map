{"version":3,"file":"component---src-pages-sketches-mime-mime-1-tsx-2263d174b3ed894d8e42.js","mappings":"wPAAO,MAAMA,EAAc,CAACC,EAAaC,IAChCC,KAAKC,UAAYF,EAAMD,GAAOA,ECoD1BI,EAAO,IAAMC,EAAAA,cAACC,EAAAA,EAAG,CAACC,MAAO,WAEtC,MA7Cc,IAAMF,EAAAA,cAACG,EAAAA,EAAY,CAC/BC,MAHY,IAIZC,OALa,IAMbC,mBAAoB,CAAEC,gBAAiB,CAAC,IAAK,IAAK,MAClDC,cAAe,CAACC,EAAK,KAAoC,IAApC,UAAEC,EAAS,UAAEC,EAAS,OAAEC,GAAO,GAqBlDC,EAAAA,EAAAA,GACEJ,GACA,KACE,MAAMK,EAAW,IAAIC,EAAAA,IAIrB,OAHAD,EAASE,UAAU,QAAS,IAC5BF,EAASG,WAAW,EAAG,EAAG,GAC1BH,EAASI,UACFT,aAAG,EAAHA,EAAKU,SAASC,gBAAgBN,EAAS,GA3BlD,YACE,IAAK,IAAIO,EAAI,EAAGA,EARR,IAQmBA,IAAK,CAC9B,MAAMC,EAAIzB,KAAK0B,KAAKF,EAAIjB,KAAaM,EAAYb,KAAK2B,IAAMb,EAE5D,IAAK,IAAIc,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,MAAMC,EAAIL,EAAI3B,GAAakB,EAAQA,GAC7Be,EAAIL,EAAI5B,GAAakB,EAAQA,QAE7B,CAAEc,IAAGC,EAAGA,EAAItB,IACpB,CAEA,IAAK,IAAIoB,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,MAAMC,EAAIL,EAAI3B,GAAakB,EAAQA,GAC7Be,EAAIL,EAAI5B,GAAakB,EAAQA,QAE7B,CAAEc,IAAGC,EAAGtB,IAAasB,EAC7B,CACF,CACF,CAWEC,GACD,EAEAC,cAAe,CAClB,CAAEC,aAAc,IAAKC,KAAM,YAAaC,MAAO,aAC/C,CAAEF,aAAc,IAAKC,KAAM,YAAaC,MAAO,aAC/C,CAAEF,aAAc,GAAIC,KAAM,SAAUC,MAAO,Y,qECxCtC,MAAMnB,EAAmC,CAC9CJ,EACAwB,EACAC,EACAC,KACI,IAAD,EACGF,aAAmBG,EAAAA,MACvBH,EAAUA,KAGZ,MAAMI,EAAU,GAEhB,IAAIC,EAAUJ,EAAmBK,OAEjC,MAAQD,EAAQE,MAAM,CACpB,MAAM,EAACd,EAAC,EAAEC,EAAC,MAAEc,GAASH,EAAQI,MAC9B,IAAIC,EAAIF,GAAgB,EACxB,MAAMG,EAAS,IAAIC,EAAAA,IAAOZ,GAC1BW,EAAOlB,EAAIA,EAAKkB,EAAOxC,MAAQuC,EAAK,EACpCC,EAAOjB,EAAIA,EAAKiB,EAAOvC,OAASsC,EAAK,EACrCC,EAAOH,MAAQ,CAAEf,EAAGiB,EAAGhB,EAAGgB,GAC1BN,EAAQS,KAAKF,GACbN,EAAUJ,EAAmBK,MAC/B,CAEKJ,IACHA,EAAoB,IAAIY,EAAAA,IAAuBV,EAAQW,UAGzD,EAAAb,GAAkBc,SAAQ,QAAIZ,GAG9B5B,EAAIyC,MAAMD,SAASd,EAAkB,C","sources":["webpack://playground-gatsby/./src/utils/randomFloat.ts","webpack://playground-gatsby/./src/pages/sketches/mime/mime1.tsx","webpack://playground-gatsby/./src/utils/createSpritesInParticleContainer.ts"],"sourcesContent":["export const randomFloat = (min: number, max: number): number => {\r\n  return Math.random() * (max - min) + min;\r\n}","import { StaticSketch } from \"../../../components\"\r\nimport React from \"react\"\r\nimport { createSpritesInParticleContainer } from \"../../../utils/createSpritesInParticleContainer\"\r\nimport Seo from \"../../../components/seo\"\r\nimport { Graphics } from \"pixi.js\"\r\nimport { randomFloat } from \"../../../utils/randomFloat\"\r\n\r\nconst height = 512;\r\nconst width = 512;\r\n\r\nconst Mime1 = () => <StaticSketch\r\n  width={width}\r\n  height={height}\r\n  applicationOptions={{ backgroundColor: [.75, .75, .75] }}\r\n  renderContent={(app, { frequency, amplitude, jitter}) => {\r\n    function* coordinates() {\r\n      for (let i = 0; i < width; i++) {\r\n        const v = Math.cos((i - width / 2) / frequency * Math.PI) * amplitude;\r\n\r\n        for (let j = 0; j < 10; j++) {\r\n          const x = i + randomFloat(-jitter, jitter);\r\n          const y = v + randomFloat(-jitter, jitter);\r\n\r\n          yield { x, y: y + height / 2 };\r\n        }\r\n\r\n        for (let j = 0; j < 10; j++) {\r\n          const x = i + randomFloat(-jitter, jitter);\r\n          const y = v + randomFloat(-jitter, jitter);\r\n\r\n          yield { x, y: height / 2 - y}\r\n        }\r\n      }\r\n    }\r\n\r\n    createSpritesInParticleContainer(\r\n      app,\r\n      () => {\r\n        const graphics = new Graphics();\r\n        graphics.beginFill('black', .2);\r\n        graphics.drawCircle(0, 0, 4);\r\n        graphics.endFill();\r\n        return app?.renderer.generateTexture(graphics);\r\n      },\r\n      coordinates()\r\n    )\r\n\r\n  }} sketchOptions={[\r\n  { initialValue: 512, name: 'frequency', label: 'Frequency' },\r\n  { initialValue: 175, name: 'amplitude', label: 'Amplitude' },\r\n  { initialValue: 25, name: 'jitter', label: 'Jitter' },\r\n]} />\r\n\r\nexport const Head = () => <Seo title={\"Mime 1\"} />\r\n\r\nexport default Mime1;","import { Application, RenderTexture, Sprite } from \"pixi.js\"\r\nimport * as PIXI from \"pixi.js\";\r\n\r\n/**\r\n * Using a given texture, coordinate generator, and app, creates a particle container with sprites at the given coordinates.\r\n * @param app - Application to add the particle container to\r\n * @param texture - A texture or a function that returns a texture\r\n * @param coordinateFunction - Generator function that returns an object with x and y coordinates\r\n * @param particleContainer - optional ParticleContainer to add sprites to, if specified, ensure that the max size is greater than the number of sprites\r\n */\r\nexport const createSpritesInParticleContainer = (\r\n  app: Application,\r\n  texture: RenderTexture | (() => RenderTexture),\r\n  coordinateFunction: Generator<{ x: number, y: number, scale?: number }>,\r\n  particleContainer?: PIXI.ParticleContainer\r\n) => {\r\n  if (!(texture instanceof RenderTexture)) {\r\n    texture = texture();\r\n  }\r\n\r\n  const sprites = [];\r\n\r\n  let current = coordinateFunction.next();\r\n\r\n  while (!current.done) {\r\n    const {x, y, scale} = current.value;\r\n    let s = scale ? scale : 1;\r\n    const sprite = new Sprite(texture);\r\n    sprite.x = x - (sprite.width * s) / 2;\r\n    sprite.y = y - (sprite.height * s) / 2;\r\n    sprite.scale = { x: s, y: s }\r\n    sprites.push(sprite);\r\n    current = coordinateFunction.next();\r\n  }\r\n\r\n  if (!particleContainer) {\r\n    particleContainer = new PIXI.ParticleContainer(sprites.length);\r\n  }\r\n\r\n  particleContainer.addChild(...sprites);\r\n\r\n  // @ts-ignore\r\n  app.stage.addChild(particleContainer);\r\n}"],"names":["randomFloat","min","max","Math","random","Head","React","Seo","title","StaticSketch","width","height","applicationOptions","backgroundColor","renderContent","app","frequency","amplitude","jitter","createSpritesInParticleContainer","graphics","Graphics","beginFill","drawCircle","endFill","renderer","generateTexture","i","v","cos","PI","j","x","y","coordinates","sketchOptions","initialValue","name","label","texture","coordinateFunction","particleContainer","RenderTexture","sprites","current","next","done","scale","value","s","sprite","Sprite","push","PIXI","length","addChild","stage"],"sourceRoot":""}