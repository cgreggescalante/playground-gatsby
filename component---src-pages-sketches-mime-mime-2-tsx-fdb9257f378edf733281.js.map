{"version":3,"file":"component---src-pages-sketches-mime-mime-2-tsx-fdb9257f378edf733281.js","mappings":"2NAMA,MAyCaA,EAAO,IAAMC,EAAAA,cAACC,EAAAA,EAAG,CAACC,MAAO,WAEtC,UAxCc,IAAMF,EAAAA,cAACG,EAAAA,EAAY,CAC/BC,MAHY,IAIZC,OALa,IAMbC,mBAAoB,CAAEC,gBAAiB,CAAC,IAAK,IAAK,MAClDC,cAAe,CAACC,EAAK,KAAwC,IAAxC,MAAEC,EAAK,UAAEC,EAAS,UAAEC,EAAS,IAAEC,GAAI,GAetDC,EAAAA,EAAAA,GACEL,GACA,KACE,MAAMM,EAAW,IAAIC,EAAAA,IAIrB,OAHAD,EAASE,UAAU,QAAS,IAC5BF,EAASG,WAAW,EAAG,EAAG,GAC1BH,EAASI,UACFV,aAAG,EAAHA,EAAKW,SAASC,gBAAgBN,EAAS,GArBlD,YACE,MAAMO,EAAQC,KAAKC,MAAOpB,KAAcS,GAAOD,EAAY,KAE3D,IAAK,IAAIa,EAAO,EAAGA,EAAOH,EAAOG,IAC/B,IAAK,IAAIC,EAAI,EAAGA,EAAIhB,EAAOgB,IAAK,CAC9B,MAAMC,EAAIJ,KAAKK,IAAIF,EAAIhB,EAAQC,EAAY,EAAIY,KAAKM,KAAOjB,EAAYa,EAAOZ,GAAOY,EAAOZ,EACtFiB,EAAIP,KAAKK,IAAIF,EAAIhB,EAAQ,EAAIa,KAAKM,IAAMF,EAAIvB,IAC5C2B,EAAIR,KAAKS,IAAIN,EAAIhB,EAAQ,EAAIa,KAAKM,IAAMF,EAAItB,SAE5C,CAAEyB,IAAGC,IACb,CAEJ,CAWEE,GACD,EAEAC,cAAe,CAClB,CAAEC,aAAc,KAAMC,KAAM,QAASC,MAAO,SAC5C,CAAEF,aAAc,GAAIC,KAAM,YAAaC,MAAO,aAC9C,CAAEF,aAAc,IAAKC,KAAM,YAAaC,MAAO,aAC/C,CAAEF,aAAc,EAAGC,KAAM,MAAOC,MAAO,S,qEClClC,MAAMvB,EAAmC,CAC9CL,EACA6B,EACAC,EACAC,KACI,IAAD,EACGF,aAAmBG,EAAAA,MACvBH,EAAUA,KAGZ,MAAMI,EAAU,GAEhB,IAAIC,EAAUJ,EAAmBK,OAEjC,MAAQD,EAAQE,MAAM,CACpB,MAAM,EAACf,EAAC,EAAEC,EAAC,MAAEe,GAASH,EAAQI,MAC9B,IAAIC,EAAIF,GAAgB,EACxB,MAAMG,EAAS,IAAIC,EAAAA,IAAOZ,GAC1BW,EAAOnB,EAAIA,EAAKmB,EAAO7C,MAAQ4C,EAAK,EACpCC,EAAOlB,EAAIA,EAAKkB,EAAO5C,OAAS2C,EAAK,EACrCC,EAAOH,MAAQ,CAAEhB,EAAGkB,EAAGjB,EAAGiB,GAC1BN,EAAQS,KAAKF,GACbN,EAAUJ,EAAmBK,MAC/B,CAEKJ,IACHA,EAAoB,IAAIY,EAAAA,IAAuBV,EAAQW,UAGzD,EAAAb,GAAkBc,SAAQ,QAAIZ,GAG9BjC,EAAI8C,MAAMD,SAASd,EAAkB,C","sources":["webpack://playground-gatsby/./src/pages/sketches/mime/mime2.tsx","webpack://playground-gatsby/./src/utils/createSpritesInParticleContainer.ts"],"sourcesContent":["import { StaticSketch } from \"../../../components\"\r\nimport React from \"react\"\r\nimport { createSpritesInParticleContainer } from \"../../../utils/createSpritesInParticleContainer\"\r\nimport Seo from \"../../../components/seo\"\r\nimport { Graphics } from \"pixi.js\"\r\n\r\nconst height = 512;\r\nconst width = 512;\r\n\r\nconst Mime2 = () => <StaticSketch\r\n  width={width}\r\n  height={height}\r\n  applicationOptions={{ backgroundColor: [.75, .75, .75] }}\r\n  renderContent={(app, { steps, frequency, amplitude, gap}) => {\r\n    function* coordinates() {\r\n      const rings = Math.floor((width / 2) / (gap * (amplitude + 1)));\r\n\r\n      for (let ring = 0; ring < rings; ring++) {\r\n        for (let i = 0; i < steps; i++) {\r\n          const d = Math.cos(i / steps * frequency * 2 * Math.PI) * (amplitude * ring * gap) + ring * gap;\r\n          const x = Math.cos(i / steps * 2 * Math.PI) * d + width / 2;\r\n          const y = Math.sin(i / steps * 2 * Math.PI) * d + height / 2;\r\n\r\n          yield { x, y };\r\n        }\r\n      }\r\n    }\r\n\r\n    createSpritesInParticleContainer(\r\n      app,\r\n      () => {\r\n        const graphics = new Graphics();\r\n        graphics.beginFill('black', .2);\r\n        graphics.drawCircle(0, 0, 2);\r\n        graphics.endFill();\r\n        return app?.renderer.generateTexture(graphics);\r\n      },\r\n      coordinates()\r\n    )\r\n\r\n  }} sketchOptions={[\r\n  { initialValue: 1500, name: 'steps', label: 'Steps' },\r\n  { initialValue: 14, name: 'frequency', label: 'Frequency' },\r\n  { initialValue: .12, name: 'amplitude', label: 'Amplitude' },\r\n  { initialValue: 5, name: 'gap', label: 'Gap' },\r\n]} />\r\n\r\nexport const Head = () => <Seo title={\"Mime 2\"} />\r\n\r\nexport default Mime2;","import { Application, RenderTexture, Sprite } from \"pixi.js\"\r\nimport * as PIXI from \"pixi.js\";\r\n\r\n/**\r\n * Using a given texture, coordinate generator, and app, creates a particle container with sprites at the given coordinates.\r\n * @param app - Application to add the particle container to\r\n * @param texture - A texture or a function that returns a texture\r\n * @param coordinateFunction - Generator function that returns an object with x and y coordinates\r\n * @param particleContainer - optional ParticleContainer to add sprites to, if specified, ensure that the max size is greater than the number of sprites\r\n */\r\nexport const createSpritesInParticleContainer = (\r\n  app: Application,\r\n  texture: RenderTexture | (() => RenderTexture),\r\n  coordinateFunction: Generator<{ x: number, y: number, scale?: number }>,\r\n  particleContainer?: PIXI.ParticleContainer\r\n) => {\r\n  if (!(texture instanceof RenderTexture)) {\r\n    texture = texture();\r\n  }\r\n\r\n  const sprites = [];\r\n\r\n  let current = coordinateFunction.next();\r\n\r\n  while (!current.done) {\r\n    const {x, y, scale} = current.value;\r\n    let s = scale ? scale : 1;\r\n    const sprite = new Sprite(texture);\r\n    sprite.x = x - (sprite.width * s) / 2;\r\n    sprite.y = y - (sprite.height * s) / 2;\r\n    sprite.scale = { x: s, y: s }\r\n    sprites.push(sprite);\r\n    current = coordinateFunction.next();\r\n  }\r\n\r\n  if (!particleContainer) {\r\n    particleContainer = new PIXI.ParticleContainer(sprites.length);\r\n  }\r\n\r\n  particleContainer.addChild(...sprites);\r\n\r\n  // @ts-ignore\r\n  app.stage.addChild(particleContainer);\r\n}"],"names":["Head","React","Seo","title","StaticSketch","width","height","applicationOptions","backgroundColor","renderContent","app","steps","frequency","amplitude","gap","createSpritesInParticleContainer","graphics","Graphics","beginFill","drawCircle","endFill","renderer","generateTexture","rings","Math","floor","ring","i","d","cos","PI","x","y","sin","coordinates","sketchOptions","initialValue","name","label","texture","coordinateFunction","particleContainer","RenderTexture","sprites","current","next","done","scale","value","s","sprite","Sprite","push","PIXI","length","addChild","stage"],"sourceRoot":""}