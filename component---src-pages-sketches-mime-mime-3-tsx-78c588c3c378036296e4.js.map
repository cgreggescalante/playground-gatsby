{"version":3,"file":"component---src-pages-sketches-mime-mime-3-tsx-78c588c3c378036296e4.js","mappings":"2NAMA,MAmCaA,EAAO,IAAMC,EAAAA,cAACC,EAAAA,EAAG,CAACC,MAAO,WAEtC,UAlCc,IAAMF,EAAAA,cAACG,EAAAA,EAAY,CAC/BC,MAHY,KAIZC,OALa,KAMbC,mBAAoB,CAAEC,gBAAiB,CAAC,IAAK,IAAK,MAClDC,cAAe,CAACC,EAAK,KAA4B,IAA5B,UAAEC,EAAS,UAAEC,GAAU,GAW1CC,EAAAA,EAAAA,GACEH,GACA,KACE,MAAMI,EAAW,IAAIC,EAAAA,IAIrB,OAHAD,EAASE,UAAU,QAAS,EAAI,KAChCF,EAASG,WAAW,EAAG,EAAGL,EAAY,GACtCE,EAASI,UACFR,aAAG,EAAHA,EAAKS,SAASC,gBAAgBN,EAAS,GAjBlD,YACE,IAAK,IAAIO,EAAI,EAAGA,GATP,MASkC,GAAZT,GAAiBS,IAC9C,IAAK,IAAIC,EAAI,EAAGA,EATV,KASqBA,IAAK,CAC9B,MAAMC,EAAQC,KAAKC,IAAID,KAAKE,KAAKJ,EAAIX,EAAY,GAAKU,EAAI,KAAOG,KAAKG,GAAKhB,UAErE,CAAEiB,EAAGN,EAAGO,EAAGR,EAAIT,EAAY,GAAIW,QACvC,CAEJ,CAWEO,GACD,EAEAC,cAAe,CAChB,CAAEC,aAAc,IAAKC,KAAM,YAAaC,MAAO,aAC/C,CAAEF,aAAc,IAAKC,KAAM,YAAaC,MAAO,e,qEC5B5C,MAAMrB,EAAmC,CAC9CH,EACAyB,EACAC,EACAC,KACI,IAAD,EACGF,aAAmBG,EAAAA,MACvBH,EAAUA,KAGZ,MAAMI,EAAU,GAEhB,IAAIC,EAAUJ,EAAmBK,OAEjC,MAAQD,EAAQE,MAAM,CACpB,MAAM,EAACd,EAAC,EAAEC,EAAC,MAAEN,GAASiB,EAAQG,MAC9B,IAAIC,EAAIrB,GAAgB,EACxB,MAAMsB,EAAS,IAAIC,EAAAA,IAAOX,GAC1BU,EAAOjB,EAAIA,EAAKiB,EAAOxC,MAAQuC,EAAK,EACpCC,EAAOhB,EAAIA,EAAKgB,EAAOvC,OAASsC,EAAK,EACrCC,EAAOtB,MAAQ,CAAEK,EAAGgB,EAAGf,EAAGe,GAC1BL,EAAQQ,KAAKF,GACbL,EAAUJ,EAAmBK,MAC/B,CAEKJ,IACHA,EAAoB,IAAIW,EAAAA,IAAuBT,EAAQU,UAGzD,EAAAZ,GAAkBa,SAAQ,QAAIX,GAG9B7B,EAAIyC,MAAMD,SAASb,EAAkB,C","sources":["webpack://playground-gatsby/./src/pages/sketches/mime/mime3.tsx","webpack://playground-gatsby/./src/utils/createSpritesInParticleContainer.ts"],"sourcesContent":["import { StaticSketch } from \"../../../components\"\r\nimport React from \"react\"\r\nimport { createSpritesInParticleContainer } from \"../../../utils/createSpritesInParticleContainer\"\r\nimport Seo from \"../../../components/seo\"\r\nimport { Graphics } from \"pixi.js\"\r\n\r\nconst height = 1024;\r\nconst width = 1024;\r\n\r\nconst Mime3 = () => <StaticSketch\r\n  width={width}\r\n  height={height}\r\n  applicationOptions={{ backgroundColor: [.75, .75, .75] }}\r\n  renderContent={(app, { frequency, amplitude}) => {\r\n    function* coordinates() {\r\n      for (let i = 0; i <= height / (amplitude * .8); i++) {\r\n        for (let j = 0; j < width; j++) {\r\n          const scale = Math.abs(Math.cos((j - frequency / 2 * (i % 2)) * (Math.PI / frequency)));\r\n\r\n          yield { x: j, y: i * amplitude * .8, scale };\r\n        }\r\n      }\r\n    }\r\n\r\n    createSpritesInParticleContainer(\r\n      app,\r\n      () => {\r\n        const graphics = new Graphics();\r\n        graphics.beginFill('black', 5 / 255);\r\n        graphics.drawCircle(0, 0, amplitude / 2);\r\n        graphics.endFill();\r\n        return app?.renderer.generateTexture(graphics);\r\n      },\r\n      coordinates()\r\n    )\r\n\r\n  }} sketchOptions={[\r\n    { initialValue: 512, name: 'frequency', label: 'Frequency' },\r\n    { initialValue: 128, name: 'amplitude', label: 'Amplitude' },\r\n  ]} />\r\n\r\nexport const Head = () => <Seo title={\"Mime 3\"} />\r\n\r\nexport default Mime3;","import { Application, RenderTexture, Sprite } from \"pixi.js\"\r\nimport * as PIXI from \"pixi.js\";\r\n\r\n/**\r\n * Using a given texture, coordinate generator, and app, creates a particle container with sprites at the given coordinates.\r\n * @param app - Application to add the particle container to\r\n * @param texture - A texture or a function that returns a texture\r\n * @param coordinateFunction - Generator function that returns an object with x and y coordinates\r\n * @param particleContainer - optional ParticleContainer to add sprites to, if specified, ensure that the max size is greater than the number of sprites\r\n */\r\nexport const createSpritesInParticleContainer = (\r\n  app: Application,\r\n  texture: RenderTexture | (() => RenderTexture),\r\n  coordinateFunction: Generator<{ x: number, y: number, scale?: number }>,\r\n  particleContainer?: PIXI.ParticleContainer\r\n) => {\r\n  if (!(texture instanceof RenderTexture)) {\r\n    texture = texture();\r\n  }\r\n\r\n  const sprites = [];\r\n\r\n  let current = coordinateFunction.next();\r\n\r\n  while (!current.done) {\r\n    const {x, y, scale} = current.value;\r\n    let s = scale ? scale : 1;\r\n    const sprite = new Sprite(texture);\r\n    sprite.x = x - (sprite.width * s) / 2;\r\n    sprite.y = y - (sprite.height * s) / 2;\r\n    sprite.scale = { x: s, y: s }\r\n    sprites.push(sprite);\r\n    current = coordinateFunction.next();\r\n  }\r\n\r\n  if (!particleContainer) {\r\n    particleContainer = new PIXI.ParticleContainer(sprites.length);\r\n  }\r\n\r\n  particleContainer.addChild(...sprites);\r\n\r\n  // @ts-ignore\r\n  app.stage.addChild(particleContainer);\r\n}"],"names":["Head","React","Seo","title","StaticSketch","width","height","applicationOptions","backgroundColor","renderContent","app","frequency","amplitude","createSpritesInParticleContainer","graphics","Graphics","beginFill","drawCircle","endFill","renderer","generateTexture","i","j","scale","Math","abs","cos","PI","x","y","coordinates","sketchOptions","initialValue","name","label","texture","coordinateFunction","particleContainer","RenderTexture","sprites","current","next","done","value","s","sprite","Sprite","push","PIXI","length","addChild","stage"],"sourceRoot":""}